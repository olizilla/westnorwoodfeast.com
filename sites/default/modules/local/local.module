<?php

function local_init() {
	// Set the Gmap markers directory to local.
  	if (is_null(variable_get('gmap_markerfiles', null))) {
    	variable_set('gmap_markerfiles', drupal_get_path('module', 'local') . '/markers');
  	} 
}

function local_profile_alter(&$account) {
	//print_r($account);
}

function local_menu() {

}

function local_form_alter(&$form, $form_state, $form_id) {
	//forms mod code
	//print_r($form);
	//print $form_id.'<br/>';
	if ($form_id == 'conversation_node_form') {
		if (arg(1) == 'add') drupal_set_title(t('Start a New Conversation'));
		//conversation edit
		$form['field_local_attach'] = array(
			'#type' => 'hidden',
			'#value' => $form['field_site_reference']['#default_value'][0]['nid']
			);
		unset($form['field_site_reference']['#type']);
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add' && is_numeric(arg(3))) {
			//adding a new conversation
			//print_r($form);
			$attachnode = arg(3);
			$form['field_site_reference']['#default_value'][0]['nid'] = $attachnode;
			$form['field_local_attach']['#value'] = $attachnode;
		}
		//unset($form['field_site_reference']);
	}
	if ($form_id == 'comment_form') {
		//print_r($form);
		global $user;
		//$form['_author']['#value'] = $user->name;
		$form['author']['#value'] = $user->name;
		//print_r ($user);
		//print_r($form);
	}
	
	if ($form_id == 'profile_node_form') {
		if (arg(1) == 'add') drupal_set_title(t('Create a Profile'));
	}
		
	if ($form_id == 'event_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add an Event to our Map'));
		//edit an event
		//print_r($form);
		//print_r($form_state);
		unset($form['field_date_repeat']);
		$form['#validate'][] = 'local_form_validate';
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
		$form['field_time']['#attributes'] = array('class' => 'time-fieldset');
		$form['field_time']['#prefix'] = '<div class="time-wrapper">';
    	$form['field_time']['#suffix'] = '</div>';
    	$form['field_repeat_period']['#prefix'] = '<div class="or-sep">or</div>';
	}
	if ($form_id == 'hub_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add a New Hub'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	if ($form_id == 'shop_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add a Shop to our Map'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	if ($form_id == 'business_node_form') {
		$form['#validate'][] = 'local_form_validate';
		//print_r($form);
		if (arg(1) == 'add') drupal_set_title(t('Add a Business to our Map'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	if ($form_id == 'organisation_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add an Organisation to our Map'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	if ($form_id == 'cafe_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add a Cafe to our Map'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	if ($form_id == 'pub_node_form') {
		$form['#validate'][] = 'local_form_validate';
		if (arg(1) == 'add') drupal_set_title(t('Add a Pub to our Map'));
		$form['locations'][0]['#location_settings']['form']['fields']['city']['collect'] = 0;
		$form['locations'][0]['#location_settings']['form']['fields']['country']['collect'] = 0;
	}
	
	//opening hours custumisation
	if ($form_id == 'business_node_form' || 'organisation_node_form' || 'shop_node_form') {
		/*$form['field_bus_open_hours'][0]['#title'] = 'Monday';
		$form['field_bus_open_hours'][1]['#title'] = 'Tuesday';
		$form['field_bus_open_hours'][2]['#title'] = 'Wednesday';
		$form['field_bus_open_hours'][3]['#title'] = 'Thursday';
		$form['field_bus_open_hours'][4]['#title'] = 'Friday';
		$form['field_bus_open_hours'][5]['#title'] = 'Saturday';
		$form['field_bus_open_hours'][6]['#title'] = 'Sunday';*/
//		print_r($form['field_open_sunday']);
//		$form['field_open_sunday']['#description'] .= 'please include space between time and am/pm'; 
		$form['field_open_monday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_monday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		unset($form['field_open_monday'][0]['#element_validate'][1]);
		$form['field_open_tuesday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_wednesday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_thursday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_friday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_saturday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		$form['field_open_sunday'][0]['#element_validate'][0] = 'local_open_hours_date_combo_validate';
		//print_r($form);
		//drupal_add_js($data = '$(".new-item-link").hover(function(){ $("#new-item-menu").fadeIn(300); },function(){ $("#new-item-menu").fadeOut(300);} );', $type = 'inline', $scope = 'footer', $defer = FALSE, $cache = TRUE, $preprocess = TRUE);
	}
	
}

function local_form_validate($form, &$form_state) {
	global $user;
	if ($form['nid']['#post']['form_id'] == "conversation_node_form") {
		//validate the conversation form (reset the node attach)
		$form_state['values']['field_site_reference'][0]['nid'] = $form_state['values']['field_local_attach'];
		//unset($form_state['values']['field_local_attach']);
	}
	
	if ($form['nid']['#post']['form_id'] == "shop_node_form" || $form['nid']['#post']['form_id'] == "business_node_form" || $form['nid']['#post']['form_id'] == "organisation_node_form") {
		//print_r($form_state);
		//exit;
		foreach ($form_state['values'] as $key => $value) {
			//print $key;
			//print '<br>';
			if ($key == 'field_open_monday' || $key == 'field_open_tuesday' || $key == 'field_open_wednesday' || $key == 'field_open_thursday' || $key == 'field_open_friday' || $key == 'field_open_saturday' || $key == 'field_open_sunday') {
				/*if (isset($form_state['values'][$key][0]['value']['date'])) {
					$form_state['values'][$key][0]['value'] = strtotime($form_state['values'][$key][0]['value']['date']);
					unset($form_state['values'][$key][0]['value']['date']);
				}
				if (isset($form_state['values'][$key][0]['value2']['date'])) {
					$form_state['values'][$key][0]['value2'] = strtotime($form_state['values'][$key][0]['value2']['date']);
					unset($form_state['values'][$key][0]['value2']['date']);
				}*/
				$val1 = strtotime($form_state['values'][$key][0]['value']);
				$val2 = strtotime($form_state['values'][$key][0]['value2']);
				//print $val1.'<br>'.$val2.'<br>';
				if ($val1 >= $val2) {
					$val2 = $val2 + 86400;
					//print $val2.'<br>';
					$form_state['values'][$key][0]['value2'] = date('Y-m-d H:i:s', $val2);
					//print $form_state['values'][$key][0]['value'].'<br>';
					//print $form_state['values'][$key][0]['value2'].'<br>';
					$form_state['clicked_button']['#post'][$key][0]['value2'] == '';
				}
			}
		}
		if ($form_state['values']['field_i_am_the_owner'][0]['value'] == 'I am the owner') {
			$form_state['values']['field_private_who_is_owner'][0]['uid'] = $user->uid;
		}
		//exit;
	}
	
	if ($form['nid']['#post']['form_id'] == "event_node_form" || $form['nid']['#post']['form_id'] == "shop_node_form" || $form['nid']['#post']['form_id'] == "business_node_form" || $form['nid']['#post']['form_id'] == "organisation_node_form") {
		$form_state['values']['field_bus_web'][0]['value'] = str_replace('http://', '', $form_state['values']['field_bus_web'][0]['value']);
		$form_state['values']['field_bus_web'][0]['value'] = str_replace('https://', '', $form_state['values']['field_bus_web'][0]['value']);
		//print_r($form_state['values']['field_bus_web'][0]);
	}
}

function local_open_hours_date_combo_validate($element, &$form_state) {
  $form_values = $form_state['values'];
  //print_r($form_state['values']);exit;
//  foreach ($form_state['values'] as $key => $value) {
//  	if ($key == 'field_open_monday' || $key == 'field_open_tuesday' || $key == 'field_open_wednesday' || $key == 'field_open_thursday' || $key == 'field_open_friday' || $key == 'field_open_saturday' || $key == 'field_open_sunday') {
//	  if (isset($form_state['values'][$key][0]['value']['date'])) {
//	  	$form_state['values'][$key][0]['value']['date'] = str_replace('am', ' am', $form_state['values'][$key][0]['value']['date']);
//	  	$form_state['values'][$key][0]['value']['date'] = str_replace('pm', ' pm', $form_state['values'][$key][0]['value']['date']);
//	  }
//  	}
//  }
  $field_name = $element['#field_name'];
  $delta = $element['#delta'];
  
  // If the whole field is empty and that's OK, stop now.
  if (empty($element['#post'][$field_name]) && !$element['#required']) {
    return;
  }
  
  // Repeating dates have a different form structure, so get the
  // right item values.
  $item = isset($form_values[$field_name]['rrule']) ? $form_values[$field_name] : $form_values[$field_name][$delta];
  $posted = isset($form_values[$field_name]['rrule']) ? $element['#post'][$field_name] : $element['#post'][$field_name][$delta];
    
  $field = $form_state['#field_info'][$element['#field_name']];
  $from_field = 'value';
  $to_field = 'value2';
  $tz_field = 'timezone';
  $offset_field = 'offset';
  $offset_field2 = 'offset2';
  
  // Unfortunately, due to the fact that much of the processing is already
  // done by the time we get here, it is not possible highlight the field
  // with an error, we just try to explain which element is creating the
  // problem in the error message.
  $parent = $element['#parents'];
  $error_field = array_pop($parent);
  $errors = array();

  // Check for empty 'From date', which could either be an empty
  // value or an array of empty values, depending on the widget.
  $empty = TRUE;
  if (!empty($item[$from_field])) {
    if (!is_array($item[$from_field])) {
      $empty = FALSE;
    }
    else {
      foreach ($item[$from_field] as $key => $value) {
        if (!empty($value)) {
          $empty = FALSE;
          break;
        }
      }
    }
  }
  if ($empty) {
    $item = date_element_empty($element, $form_state);
    if (!$element['#required']) {
      return;
    }
  }
  // Don't look for further errors if errors are already flagged
  // because otherwise we'll show errors on the nested elements
  // more than once.
  elseif (!form_get_errors()) {
                
    // Check todate input for blank values and substitute in fromdate
    // values where needed, then re-compute the todate with those values.
    if ($field['todate']) {
      $merged_date = array();
      $to_date_empty = TRUE;
      foreach ($posted[$to_field] as $part => $value) {
        $to_date_empty = $to_date_empty && empty($value);
        $merged_date[$part] = empty($value) ? $posted[$from_field][$part] : $value;
        if ($part == 'ampm' && $merged_date['ampm'] == 'pm' && $merged_date['hour'] < 12) {
          $merged_date['hour'] += 12;
        }
        elseif ($part == 'ampm' && $merged_date['ampm'] == 'am' && $merged_date['hour'] == 12) {
          $merged_date['hour'] -= 12;
        }
      }
              
      // If all date values were empty and a date is required, throw 
      // an error on the first element. We don't want to create 
      // duplicate messages on every date part, so the error will 
      // only go on the first.  
      if ($to_date_empty && $field['todate'] == 'required') {
        $errors[] = t('Some value must be entered in the To date.');
      }

      $element[$to_field]['#value'] = $merged_date;
      
      // Call the right function to turn this altered user input into
      // a new value for the todate.
      $item[$to_field] = $merged_date;
    }
    else {
      $item[$to_field] = $item[$from_field];
    }
    
    $from_date = date_input_value($field, $element[$from_field]);
    /*$from_date_off = strlen($from_date) - 3;
    $from_date_sub = substr ($from_date, $from_date_off);
    //print $from_date; exit;
    if ($from_date_sub != ' am' || $from_date_sub != ' pm') {
    	$from_date = str_replace('am', ' am', $from_date);
    	$from_date = str_replace('pm', ' pm', $from_date);
    }*/
    if (!empty($field['todate'])) {
      $to_date = date_input_value($field, $element[$to_field]);
      /*$from_date_off = strlen($to_date) - 3;
	  $from_date_sub = substr ($to_date, $to_date_off);
	  //print $from_date; exit;
	  if ($to_date_sub != ' am' || $to_date_sub != ' pm') {
	    	$to_date = str_replace('am', ' am', $to_date);
	    	$to_date = str_replace('pm', ' pm', $to_date);
	  }*/
    }
    else {
      $to_date = $from_date;
    }
    
    // Neither the from date nor the to date should be empty at this point
    // unless they held values that couldn't be evaluated.
    if (!$field['required'] && (empty($from_date) || empty($to_date))) {
      $item = date_element_empty($element, $form_state);
      $errors[] = t('The dates are invalid.');
    }
    elseif (!empty($field['todate']) && $from_date > $to_date) {
      //form_set_value($element[$to_field], $to_date, $form_state);
      //$errors[] = t('OPEN HOURS - The To date must be greater than the From date.');
    }
    else {
      // Convert input dates back to their UTC values and re-format to ISO
      // or UNIX instead of the DATETIME format used in element processing.
      $timezone = !empty($item[$tz_field]) ? $item[$tz_field] : $element['#date_timezone'];
      $timezone_db = date_get_timezone_db($field['tz_handling']);
      $item[$tz_field] = $timezone;

      $from_date = date_make_date($from_date, $timezone);
      $item[$offset_field] = date_offset_get($from_date);
      
      $to_date = date_make_date($to_date, $timezone);
      $test_from = date_format($from_date, 'r');
      $test_to = date_format($to_date, 'r');
      
      $item[$offset_field2] = date_offset_get($to_date);
      date_timezone_set($from_date, timezone_open($timezone_db));
      date_timezone_set($to_date, timezone_open($timezone_db));
      $item[$from_field] = date_format($from_date, date_type_format($field['type']));
      $item[$to_field] = date_format($to_date, date_type_format($field['type']));
      if (isset($form_values[$field_name]['rrule'])) {
        $item['rrule'] = $form_values[$field['field_name']]['rrule'];
      }
      
      // Test a roundtrip back to the original timezone to catch
      // invalid dates, like 2AM on the day that spring daylight savings
      // time begins in the US.
      date_timezone_set($from_date, timezone_open($timezone));
      date_timezone_set($to_date, timezone_open($timezone));
      if ($test_from != date_format($from_date, 'r')) {
        $errors[] = t('OPEN HOURS The From date is invalid.');
      }
      if ($test_to != date_format($to_date, 'r')) {
        $errors[] = t('OPEN HOURS The To date is invalid.');
      }
      if (empty($errors)) {
        form_set_value($element, $item, $form_state);
      }
    }
  }
  if (!empty($errors)) {
    if ($field['multiple']) {
      form_set_error($error_field, t('There are errors in @field_name value #@delta:', array('@field_name' => $field['widget']['label'], '@delta' => $delta + 1)) . theme('item_list', $errors));
    }
    else {
      form_set_error($error_field, t('There are errors in @field_name:', array('@field_name' => $field['widget']['label'])) . theme('item_list', $errors));      
    }
  }
}


//panels custom panes
function local_panels_pane_content_alter($content, $pane, $args, $context) {
	//print_r ($pane);
	global $user;
	if ($pane->subtype == 'conversations') {
		$this_page = drupal_get_destination();
		$oldcontent = $content->content;
		if ($user->uid != 0) {
			$link = '<ul class="buttons tabs links"><li>'.l(t('Start a New Conversation'),'node/add/conversation/'.arg(1), array('query' => $this_page)).'</li></ul>';
		} else {
			$link = '<ul class="buttons tabs links"><li>'.l(t('Please Register to Start a New Conversation'),'user/register', array('query' => 'destination=node/add/conversation/'.arg(1))).'</li></ul>';
		}
		$content->content = $link.$oldcontent;
	}
	
	if ($pane->configuration['name'] == 'add_to_mapp') {
		$link = '<ul class="buttons tabs link"><li>'.l(t('All'), 'map').'</li><li>'.l(t('Shops'), 'map/shop').'</li><li>'.l(t('Business'), 'map/business').'</li><li>'.l(t('Organisations'), 'map/organisation').'</li><li>'.l(t('Events'), 'map/event').'</li>';
		if ($user->uid !=0) {
			$link.='<li class="new-item-link">'.l(t('Add a New Item to the Map'), 'map/add').'<ul id="new-item-menu"><li>'.l(t('Add a Shop'), 'node/add/shop').'</li><li>'.l(t('Add a Business'), 'node/add/business').'</li><li>'.l(t('Add an Organisation'), 'node/add/organisation').'</li><li>'.l(t('Add an Event'), 'node/add/event').'</li></ul></li>';
			drupal_add_js($data = '$(".new-item-link").hover(function(){ $("#new-item-menu").fadeIn(300); },function(){ $("#new-item-menu").fadeOut(300);} );', $type = 'inline', $scope = 'footer', $defer = FALSE, $cache = TRUE, $preprocess = TRUE);
		} else {
			$this_page = drupal_get_destination();
			$link.='<li>'.l(t('Please Log in or Register to add to the map'), 'user', array('query' => $this_page));
		}
		$link.= '</ul>';
		$content->content = $link;
	}
	
	//print_r($pane);
	//print_r($content->content);
	if ($pane->subtype == 'return_to_map') {
		//$newcontent = $content->content;
		$newcontent = '<p>'.l('<span class="arrow">&larr;</span> '.t('return to map'), 'map', array('html' => TRUE)).'</p>';
		$content->content = $newcontent;
	}
	if ($pane->subtype == 'return_to_market') {
		//$newcontent = $content->content;
		$newcontent = '<p>'.l('<span class="arrow">&larr;</span> '.t('return to market'), 'market', array('html' => TRUE)).'</p>';
		$content->content = $newcontent;
	}
	
	if ($pane->configuration['admin_title'] == 'map-describe-links') {
		$pane->configuration['body'] = str_replace("<a href=\"#\" id=\"map-norwood-add\">Add new pages for shops, organisations, business or events which aren’t on the map yet.</a>", l(t('Add new pages for shops, organisations, business or events which aren’t on the map yet.'), 'map/add', array('attributes' => array('id' => 'map-norwood-add'))), $pane->configuration['body']);
		$content->content = $pane->configuration['body'];
	}
	
	if ($pane->configuration['admin_title'] == 'add-a-place') {
		if ($user->uid !=0) {
			$pane->configuration['body'] = str_replace('<a rel="add-shop" href="#">Add a shop</a>', l(t('Add a shop'), 'node/add/shop'), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-business" href="#">Add a business</a>', l(t('Add a business'), 'node/add/business'), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-organisation" href="#">Add an organisation</a>', l(t('Add an organisation'), 'node/add/organisation'), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-event" href="#">Add an event</a>', l(t('Add an event'), 'node/add/event'), $pane->configuration['body']);
		} else {
			$pane->configuration['body'] = str_replace('<a rel="add-shop" href="#">Add a shop</a>', l(t('Add a shop'), 'user/register', array('query' => 'destination=node/add/shop')), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-business" href="#">Add a business</a>', l(t('Add a business'), 'user/register', array('query' => 'destination=node/add/business')), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-organisation" href="#">Add an organisation</a>', l(t('Add an organisation'), 'user/register', array('query' => 'destination=node/add/organisation')), $pane->configuration['body']);
			$pane->configuration['body'] = str_replace('<a rel="add-event" href="#">Add an event</a>', l(t('Add an event'), 'user/register', array('query' => 'destination=node/add/event')), $pane->configuration['body']);
		}
		//print_r($pane->configuration);
		$content->content = $pane->configuration['body'];
	}
	
	if ($pane->configuration['admin_title'] == 'member-text') {
		if ($user->uid == 0) {
			$content->content = str_replace("<a href=\"#\">Add your profile</a>", l(t('Add your profile'), 'user/register', array('query' => 'destination=node/add/profile')), $content->content);
		} else {
			$content->content = str_replace("<a href=\"#\">Add your profile</a>", l(t('Add or update your profile'), 'node/add/profile'), $content->content);
		}
	}
	
	if ($pane->configuration['nid'] == 28) {
		if ($user->uid == 0) {
			$content->content = str_replace("<a href=\"/node/add/profile\">create a profile</a>", l(t('create a profile'), 'user/register', array('query' => 'destination=node/add/profile')), $content->content);
		}
		//$content->content = $pane->configuration['body'];
	}
}

//utility functions

//gmap geocode from ribaforgotten.spacemakers.org.uk
function get_lat_long_of_address($address) {
	//want to add london to the address
	if (!preg_match("/london/i", $address)) { $address.=" london"; }
	if (!preg_match("/united kingdom/i", $address)) { $address.=" united kingdom"; }
	//this is a gmap module function
	//print "$address";
	$location_data = gmap_geocode($address, $tld = 'co.uk');
//	print "location_data = ";
//	print_r($location_data);
//	print "<br />";
	if (($location_data['latitude'] == 51.5001524) && ($location_data['longitude'] == -0.1262362) && ($location_data['accuracy'] == 4)) {
		//this represents a search for generic london, and is therefore useless to us, lets set it to 0,0
		$location_data['latitude'] = 0;
		$location_data['longitude'] = 0;
		$location_data['accuracy'] = 0;
	}
	//print_r($location_data);
	return $location_data;
}

//set a location view from proximaty - from http://drupal.org/node/357295 comment 27
function get_location_proximity_view($view, $lat, $lng) {
	//print $lat;
	$view = views_get_view($view);
	$view->set_display('default');
	$view->is_cacheable = FALSE;
	
	// Fetch the distance filter (name of exposed Location proximity filter)
	$item = $view->get_item('default', 'filter', 'distance');
	
	// Apply dynamic elements to our exposed filter based on current node
	$item['value'] = array(
		'latitude' => $lat,
		'longitude' => $lng,
		'search_distance' => 1,
		'search_units' => 'mile',
	);
	//print_r($item);
	
	$view->set_item('default', 'filter', 'distance', $item);
	
	// This removes the exposed form from the display handler,
	// because we want behind the scenes filtering
	$view->display_handler->options['filters']['distance']['exposed'] = FALSE;
	//dprint_r($view);
	
	$output = $view->render();
	return $output;
}


//get a generic date array
function get_a_generic_date_array() {
	$date = Array
	(
	    'field_name' => 'field_date_repeat',
	    'type_name' => 'event',
	    'display_settings' => Array
	        (
	            'weight' => '-2',
	            'parent' => 'group_date_group',
	            'label' => Array
	                (
	                    'format' => 'above',
	                ),
	
	            'teaser' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	            'full' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	            '4' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	            '2' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	            '3' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	            'token' => Array
	                (
	                    'format' => 'default',
	                    'exclude' => '0',
	                ),
	
	        ),
	
	    'widget_active' => '1',
	    'type' => 'date',
	    'required' => '0',
	    'multiple' => '1',
	    'db_storage' => '0',
	    'module' => 'date',
	    'active' => '1',
	    'locked' => '0',
	    'columns' => Array
	        (
	            'value' => Array
	                (
	                    'type' => 'varchar',
	                    'length' => '20',
	                    'not null' => '',
	                    'sortable' => '1',
	                    'views' => '1',
	                ),
	
	            'rrule' => Array
	                (
	                    'type' => 'text',
	                    'not null' => '',
	                    'sortable' => '',
	                    'views' => '',
	                ),
	
	        ),
	
	    'granularity' => Array
	        (
	            'year' => 'year',
	            'month' => 'month',
	            'day' => 'day',
	        ),
	
	    'timezone_db' => '',
	    'tz_handling' => 'none',
	    'todate' => '',
	    'repeat' => '1',
	    'repeat_collapsed' => '0',
	    'default_format' => 'long',
	    'widget' => Array
	        (
	            'default_value' => 'now',
	            'default_value_code' => '',
	            'default_value2' => 'same',
	            'default_value_code2' => '',
	            'input_format' => 'd/m/Y - g:i:sa',
	            'input_format_custom' => 'd/m/Y',
	            'increment' => '1',
	            'text_parts' => Array
	                (
	                ),
	
	            'year_range' => '0:+30',
	            'label_position' => 'above',
	            'label' => 'Date (repeating Events)',
	            'weight' => '15',
	            'description' => 'Date for Repeating Events',
	            'type' => 'date_select_repeat',
	            'module' => 'date',
	        )
	
	);
	return $date;
	}