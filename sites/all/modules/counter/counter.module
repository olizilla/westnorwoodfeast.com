<?php
// $Id: counter.module,v 1.30 2010/09/16 18:48:29 thenicespider Exp $

/**
 * @file
 * The counter module used for displaying Site Counter.
 */

/**
 * Implementation of hook_help().
 */
function counter_help($section) {
  switch ($section) {
    case 'admin/help#Counter':
      $output = "The counter module used for displaying Site Counter.";
	return $output;
    case 'admin/modules#description':
      return 'The counter module used for displaying Site Counter';
  }
}

/**
 * Implementation of hook_perm
 */
function counter_perm() {
  return array('view counter', 'administer counter');
}
 
/**
 * Menu callback. Prints a listing of active nodes on the site.
 */

function counter_menu() {
  $items = array();

  $items['admin/settings/counter'] = array(
    'title' => 'Counter settings',
    'description' => 'Show Site Counter, Client IP, and Unique Visitor.',
    'access arguments' => array('administer counter'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('counter_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'counter.settings.inc',
  );
  
  $items['admin/settings/counter/settings'] = array(
    'title'            => 'Basic Settings',
    'access arguments' => array('administer counter'),
    'weight'           => -10,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'counter.settings.inc',
  );
  
  $items['admin/settings/counter/advanced'] = array(
    'title'            => 'Advanced',
    'access arguments' => array('administer counter'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('counter_settings_advanced'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'counter.settings.inc',
  );
  
  $items['admin/settings/counter/initial'] = array(
    'title'            => 'Initial Value',
    'access arguments' => array('administer counter'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('counter_settings_initial'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'counter.settings.inc',
  );
  
  $items['admin/settings/counter/report'] = array(
    'title'            => 'Report',
    'access arguments' => array('administer counter'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('counter_settings_report'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'counter.settings.inc',
  );
  
  $items['counter/report'] = array(
    'title' => 'Counter Report',
    'description' => 'View Counter Report',
    'access arguments' => array('administer counter'),
    'page callback' => 'counter_report',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'counter.report.inc',
  );
  
  return $items;
}

/**
 * Implementation of hook_block().
 *
 */
function counter_block($op = 'list', $delta = 0) {
  global $user, $db_url;
    
  if ($op == 'list') {
    $blocks[0]['info'] = 'Counter';
		return $blocks;
  }
  
  if ($op == 'view') {

    $counter_save_details        = variable_get('counter_save_details', 0);
    $counter_show_site_counter   = variable_get('counter_show_site_counter',1);
    $counter_show_unique_visitor = variable_get('counter_show_unique_visitor',1);
	  $counter_registered_user     = variable_get('counter_registered_user',1);
    $counter_unregistered_user   = variable_get('counter_unregistered_user',1);
    $counter_blocked_user        = variable_get('counter_blocked_user',1);
    $counter_published_node      = variable_get('counter_published_node',1);
    $counter_unpublished_node    = variable_get('counter_unpublished_node',1);
    
    $counter_show_server_ip      = variable_get('counter_show_server_ip',1);
    $counter_show_ip             = variable_get('counter_show_ip',1);
    $counter_show_counter_since  = variable_get('counter_show_counter_since',1);
    
    $counter_skip_admin           = variable_get('counter_skip_admin',0);
    $counter_refresh_delay        = variable_get('counter_refresh_delay', 10);
    
    $counter_initial_counter        = variable_get('counter_initial_counter', 0);
    $counter_initial_unique_visitor = variable_get('counter_initial_unique_visitor', 0);
    $counter_initial_since          = variable_get('counter_initial_since', date('Y-m-d H:i:s', time()));
    
		$counter_statistic_today      = variable_get('counter_statistic_today',1);
    $counter_statistic_week       = variable_get('counter_statistic_week',1);
	  $counter_statistic_month      = variable_get('counter_statistic_month',1);
		$counter_statistic_year       = variable_get('counter_statistic_year',1);
		
		//Block display
    $block['subject'] = 'Counter';    
        
		$counter_ip     = $_SERVER['REMOTE_ADDR'];
		$counter_svr_ip = $_SERVER['SERVER_ADDR'];	
		$counter_date = date('Y-m-d H:i:s');
		$counter_page   = check_plain(request_uri());
		
		//counter_insert_delay
		$db_types = $GLOBALS['db_type']; //substr($db_url,0, strpos($db_url,':'));
    
    
    $counter_lastdate = variable_get('counter_lastdate', date('Y-m-d H:i:s', time()));
    $interval = strtotime($counter_date) - strtotime($counter_lastdate);
      
    $data_update = ($interval >= $counter_refresh_delay ? 1 : 0);
    
    if ($data_update) {
      variable_set('counter_lastdate', date('Y-m-d H:i:s', time()));
    }
    
		switch ($db_types) {
      case 'mysql':
      case 'mysqli':
      if ($counter_save_details) {
        $sql = " INSERT IGNORE INTO {counter} (counter_ip,counter_date,counter_page)".
			         " VALUES ('$counter_ip','$counter_date','$counter_page')";  
      }
      else {
        $sql = " INSERT IGNORE INTO {counter_today} (counter_ip,counter_date,counter_page)".
			         " VALUES ('$counter_ip','$counter_date','$counter_page')";
      }
      break;
      
      default: //mssql, oracle, pgsql
      if ($counter_save_details) {
        $sql = " INSERT INTO {counter} (counter_ip,counter_date,counter_page)".
			         " VALUES ('$counter_ip','$counter_date','$counter_page')";
      }
      else {
        $sql = " INSERT INTO {counter_today} (counter_ip,counter_date,counter_page)".
			         " VALUES ('$counter_ip','$counter_date','$counter_page')";
      }
    }
    
		if ($user->uid <> 1) {
			$results = db_query($sql);		
		}
		
		if ($user->uid ==1 && !$counter_skip_admin) {
			$results = db_query($sql);		
		}
		
		$sql_site_counter  ="SELECT counter_value FROM {counter_data} WHERE counter_name='site_counter'";
    $results           = db_query($sql_site_counter);
    $data_site_counter = db_fetch_object($results);
		$site_counter      = $data_site_counter->counter_value;  
		
		$new_site_counter = $site_counter + 1;
			  
    $sql = " UPDATE {counter_data} SET counter_value = '%s'  WHERE counter_name='site_counter'";
    $results = db_query($sql, $new_site_counter);	
		  
	  //Read counter_data
	  //published_node, registered_user, site_counter, unique_visitor, unpublished_node, unregistered_user
	  $sql = " SELECT * FROM {counter_data} ORDER BY counter_name";      
		  
    $results = db_query($sql);
    $i=0;
    while ($data = db_fetch_object($results)) {
      $i++;
      $counter_name[$i]  = $data->counter_name; 
      $counter_value[$i] = $data->counter_value;   
    }
      
	  //Write output
	  $output   = '';  
	  $output  .= '<ul id="counter">';
	  if ($counter_show_site_counter) {
        $output .= '<li>'.t('Site Counter: '). number_format($counter_initial_counter+$counter_value[4]).'</li>';
	  }
		
	  if ($counter_show_unique_visitor) {
	    if ($data_update) {
        if ($counter_save_details) {
          $sql = " SELECT count(*) as total FROM (SELECT counter_ip FROM {counter} GROUP BY counter_ip) c";  
        }
        else {
          $sql = " SELECT count(*) as total FROM (SELECT counter_ip FROM {counter_today} GROUP BY counter_ip) c";
        }
        
        $results = db_query($sql);
        $data = db_fetch_object($results);
		    $counter_unique = $data->total;    
          
        $sql = " UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='unique_visitor' ";
        $results = db_query($sql, $counter_unique);
      } else {
        $counter_unique = $counter_value[5];    
      }
		  $output .= '<li>'.t('Unique Visitor: '). number_format($counter_initial_unique_visitor+$counter_unique).'</li>';
		}
		
		if ($counter_registered_user) {
		  if ($data_update) {
        $sql = " SELECT count(*) as total FROM {users} WHERE access<>0 and uid<>0";
        $results = db_query($sql);
        $data    = db_fetch_object($results);
		    $total   = $data->total;    
		      
		    $sql = " UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='registered_user' ";
        $results = db_query($sql, $total);
      } else {
        $total = $counter_value[3];  
      }    
		  $output .= '<li>'.t('Registered Users: '). number_format($total).'</li>';
		}
		
		if ($counter_unregistered_user) {
		  if ($data_update) {
        $sql = " SELECT count(*) as total FROM {users} WHERE access=0 and uid<>0";
        $results = db_query($sql);
        $data    = db_fetch_object($results);
		    $total   = $data->total;  
		      
		    $sql ="UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='unregistered_user' ";
        $results = db_query($sql, $total);
      } else {
        $total = $counter_value[7];  
      }  
		  $output .= '<li>'.t('Unregistered Users: '). number_format($total).'</li>';
		}
		  
		if ($counter_blocked_user) {
		  if ($data_update) {
        $sql = " SELECT count(*) as total FROM {users} WHERE status=0 and uid<>0";
        $results = db_query($sql);
        $data    = db_fetch_object($results);
		    $total   = $data->total;  
		      
		    $sql = " UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='blocked_user' ";
        $results = db_query($sql, $total);
      } else {
        $total = $counter_value[1];  
      }  
		  $output .= '<li>'.t('Blocked Users: '). number_format($total).'</li>';
		}
		
		if ($counter_published_node) {
		  if ($data_update) {
        $sql = " SELECT count(*) as total FROM {node} WHERE status=1";
        $results = db_query($sql);
        $data    = db_fetch_object($results);
		    $total   = $data->total; 
		      
		    $sql = " UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='published_node' ";
        $results = db_query($sql, $total);
      } else {
        $total = $counter_value[2];   
      }  
		  $output .= '<li>'.t('Published Nodes: '). number_format($total).'</li>';
		}
		
		if ($counter_unpublished_node) {
		  if ($data_update) { 
		    $sql = " SELECT count(*) as total FROM {node} WHERE status=0";
        $results = db_query($sql);
        $data    = db_fetch_object($results);
		    $total   = $data->total;
		    
		    $sql = "UPDATE {counter_data} SET counter_value='%s' WHERE counter_name='unpublished_node' ";
        $results = db_query($sql, $total);
		  } else {
        $total = $counter_value[6];  
      }
		  $output .= '<li>'.t('Unpublished Nodes: '). number_format($total).'</li>';
    }
		
		if ($counter_show_server_ip) {
		  $output .= '<li>'.t("Server IP: ").$counter_svr_ip.'</li>';	
		}
		
		if ($counter_show_ip) {
		  $output .= '<li>'.t("Your IP: ").$counter_ip.'</li>';	
		}
		
		if ($counter_show_counter_since) {
	    $output .= '<li>'.t("Since: "). $counter_initial_since.'</li>';	
		}
				
		if ($counter_statistic_today || $counter_statistic_week 
		 || $counter_statistic_month || $counter_statistic_year) {
		 $output .= '<li>'.t("Visitors: ").'</li>';	
		}	
		
		if ($counter_statistic_today) {
      if ($counter_save_details) {
        $sql="SELECT count(*) AS total FROM {counter} WHERE SUBSTRING(counter_date,1,10)= '%s'";  
      }
      else {
        $sql="SELECT count(*) AS total FROM {counter_today} WHERE SUBSTRING(counter_date,1,10)= '%s'";
      }
		  $results = db_query($sql, date('Y-m-d'));
      $data = db_fetch_object($results);
		  $statistic = $data->total;
			$output .= t("Today: ").$statistic."<br>";
		}
    
		if ($counter_statistic_week) {
		  $date1 = date('Y-m-d', time()-7*24*60*60);
			$date2 = date('Y-m-d');
      
      if ($counter_save_details) {
        $sql=" SELECT count(*) AS total FROM {counter} "
			    ." WHERE SUBSTRING(counter_date,1,10) >  '$date1' AND SUBSTRING(counter_date,1,10) <= '$date2'";  
      }
      else {
        $sql=" SELECT count(*) AS total FROM {counter_today} "
			    ." WHERE SUBSTRING(counter_date,1,10) >  '$date1' AND SUBSTRING(counter_date,1,10) <= '$date2'";
      }
			$results = db_query($sql);
      $data = db_fetch_object($results);
		  $statistic = $data->total;
			$output .= t("This week: ").$statistic."<br>";
		}
    
		if ($counter_statistic_month) {
      if ($counter_save_details) {
        $sql="SELECT count(*) AS total FROM {counter} WHERE SUBSTRING(counter_date,1,7)= '%s'";  
      }
      else {
        $sql="SELECT count(*) AS total FROM {counter_today} WHERE SUBSTRING(counter_date,1,7)= '%s'";
      }
		  $results = db_query($sql, date('Y-m'));
      $data = db_fetch_object($results);
		  $statistic = $data->total;
			$output .= t("This month: ").$statistic."<br>";
		}
    
		if ($counter_statistic_year) {
      if ($counter_save_details) {
        $sql="SELECT count(*) AS total FROM {counter} WHERE SUBSTRING(counter_date,1,4)= '%s'";  
      }
      else {
        $sql="SELECT count(*) AS total FROM {counter_today} WHERE SUBSTRING(counter_date,1,4)= '%s'";
      }
		  
      $results = db_query($sql, date('Y'));
      $data = db_fetch_object($results);
		  $statistic = $data->total;
			$output .= t("This year: ").$statistic;
		}
			
		$output  .= '</ul>';            
    $block['content'] = $output;
        
		if (!user_access('view counter')) {
			  return array();
		}
		return $block;
	}	  
}

?>